/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package gphotos;

import java.awt.Point;
import java.awt.Transparency;
import java.awt.image.BufferedImage;
import java.awt.image.ColorModel;
import java.awt.image.ComponentColorModel;
import java.awt.image.DataBuffer;
import java.awt.image.DataBufferByte;
import java.awt.image.Raster;
import java.awt.image.WritableRaster;
import java.io.File;
import java.io.FileOutputStream;
import java.nio.ByteBuffer;
import java.nio.file.Files;
import java.util.Arrays;
import java.util.Comparator;
import javax.imageio.ImageIO;
import javax.swing.JFileChooser;
import javax.swing.UIManager;

/**
 *
 * @author quadmium
 */
public class frame extends javax.swing.JFrame {

    /**
     * Creates new form frame
     */
    public frame() {
        try{UIManager.setLookAndFeel(UIManager.getSystemLookAndFeelClassName());} catch (Exception ex){}
        initComponents();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jButton1 = new javax.swing.JButton();
        jButton2 = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setTitle("PEncode");
        setBackground(new java.awt.Color(204, 204, 204));
        setResizable(false);

        jButton1.setText("Encode");
        jButton1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton1ActionPerformed(evt);
            }
        });

        jButton2.setText("Decode");
        jButton2.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton2ActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jButton1)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 111, Short.MAX_VALUE)
                .addComponent(jButton2)
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jButton1)
                    .addComponent(jButton2))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void jButton1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton1ActionPerformed
        // TODO add your handling code here:
        try
        {
            JFileChooser fileChooser = new JFileChooser();
            int returnValue = fileChooser.showOpenDialog(null);
            if (returnValue != JFileChooser.APPROVE_OPTION) {
              // handle
              return;
            }
            File selectedFile = fileChooser.getSelectedFile();
            new File(selectedFile.getName()).mkdir();
            
            byte[] data = Files.readAllBytes(selectedFile.toPath());
            int size = 512;
            int dataCtr = 0;
            
            for(int fileIndex = 0; dataCtr < data.length; fileIndex++)
            {
                // Add 4 for first int that tells you how long the data is
                byte[] modData = new byte[size*size*3];
                int modCtr = 0;
                if(fileIndex == 0)
                {
                    byte[] flag1 = ByteBuffer.allocate(4).putInt(data.length).array();
                    for(int i=0; i<4; i++, modCtr++)
                        modData[modCtr] = flag1[i];
                }
                
                for(; dataCtr<data.length && modCtr < modData.length; dataCtr++, modCtr++)
                    modData[modCtr] = data[dataCtr];
                
                // We incremented both by one, then saw they were too big. 
                // if we ran out of space in this file, there is one bit left so -1 on data
                if(modCtr >= modData.length)
                    dataCtr--;

                int width = size;
                int height = size;

                DataBuffer buffer = new DataBufferByte(modData, modData.length);

                //3 bytes per pixel: red, green, blue
                WritableRaster raster = Raster.createInterleavedRaster(buffer, width, height, 3 * width, 3, new int[] {2, 1, 0}, (Point)null);
                ColorModel cm = new ComponentColorModel(ColorModel.getRGBdefault().getColorSpace(), false, true, Transparency.OPAQUE, DataBuffer.TYPE_BYTE); 
                BufferedImage image = new BufferedImage(cm, raster, true, null);

                ImageIO.write(image, "png", new File(selectedFile.getName() + "\\" + fileIndex + ".png"));
            }
        }
        catch(Exception ex)
        {
            System.out.println(ex);
        }
        
    }//GEN-LAST:event_jButton1ActionPerformed

    private void jButton2ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton2ActionPerformed
        // TODO add your handling code here:
        try
        {
            JFileChooser fileChooser = new JFileChooser();
            fileChooser.setFileSelectionMode(JFileChooser.DIRECTORIES_ONLY);
            int returnValue = fileChooser.showOpenDialog(null);
            if (returnValue != JFileChooser.APPROVE_OPTION) {
              // handle
              return;
            }
            File selectedFile = fileChooser.getSelectedFile();
            
            File[] listOfFiles = selectedFile.listFiles();
            Arrays.sort(listOfFiles, new Comparator<File>() {
                @Override
                public int compare(File o1, File o2) {
                    return Integer.valueOf(o1.getName().substring(0, o1.getName().indexOf(".png"))).compareTo(Integer.valueOf(o2.getName().substring(0, o2.getName().indexOf(".png"))));
                }
            });

            int dataCtr = 0;
            byte[] realData = {};
            for (int i=0; i<listOfFiles.length; i++)
            {
                BufferedImage bufferedImage = ImageIO.read(listOfFiles[i]);

                // get DataBufferBytes from Raster
                WritableRaster raster = bufferedImage .getRaster();
                DataBufferByte data   = (DataBufferByte) raster.getDataBuffer();
                byte[] imgData = data.getData();
                int imgCtr = 0;
                if(i==0)
                {
                    byte[] dataSizeArray = new byte[4];
                    for(; imgCtr<4; imgCtr++)
                        dataSizeArray[imgCtr] = imgData[imgCtr];
                    int dataSize = ByteBuffer.wrap(dataSizeArray).getInt();
                    realData = new byte[dataSize];
                }

                for(; imgCtr<imgData.length && dataCtr < realData.length; dataCtr++, imgCtr++)
                    realData[dataCtr] = imgData[imgCtr];
                
                // If this isn't the last file we need to go back a bit because we incremented data in previous loop
                if(i != listOfFiles.length - 1)
                    dataCtr--;
            }
            
            FileOutputStream fos = new FileOutputStream("out - " + selectedFile.getName());
            fos.write(realData);
            fos.close();
        }
        catch(Exception ex)
        {
            System.out.println(ex);
        }
    }//GEN-LAST:event_jButton2ActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(frame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(frame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(frame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(frame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new frame().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton jButton1;
    private javax.swing.JButton jButton2;
    // End of variables declaration//GEN-END:variables
}
